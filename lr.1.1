import java.lang.reflect.*;

public class ClassAnalyzer {
    public static void main(String[] args) {
        // Приклад використання методу analyzeClass
        String className = "java.util.ArrayList";
        System.out.println(analyzeClass(className));
    }

    public static String analyzeClass(String className) {
        try {
            Class<?> clazz = Class.forName(className);
            return analyzeClass(clazz);
        } catch (ClassNotFoundException e) {
            return "Клас не знайдено.";
        }
    }

    public static String analyzeClass(Class<?> clazz) {
        StringBuilder result = new StringBuilder();

        // Ім'я пакета
        result.append("Пакет: ").append(clazz.getPackage()).append("\n");

        // Модифікатори та ім'я класу
        result.append("Модифікатори: ").append(Modifier.toString(clazz.getModifiers()))
                .append("\nІм'я класу: ").append(clazz.getSimpleName()).append("\n");

        // Базовий клас
        Class<?> superClass = clazz.getSuperclass();
        if (superClass != null) {
            result.append("Базовий клас: ").append(superClass.getSimpleName()).append("\n");
        }

        // Список реалізованих інтерфейсів
        Class<?>[] interfaces = clazz.getInterfaces();
        if (interfaces.length > 0) {
            result.append("Реалізовані інтерфейси: ");
            for (Class<?> anInterface : interfaces) {
                result.append(anInterface.getSimpleName()).append(", ");
            }
            result.delete(result.length() - 2, result.length()); // Видалення останнього коми та пробілу
            result.append("\n");
        }

        // Список полів
        Field[] fields = clazz.getDeclaredFields();
        if (fields.length > 0) {
            result.append("Поля:\n");
            for (Field field : fields) {
                result.append(Modifier.toString(field.getModifiers()))
                        .append(" ").append(field.getType().getSimpleName())
                        .append(" ").append(field.getName()).append("\n");
            }
        }

        // Список конструкторів
        Constructor<?>[] constructors = clazz.getDeclaredConstructors();
        if (constructors.length > 0) {
            result.append("Конструктори:\n");
            for (Constructor<?> constructor : constructors) {
                result.append(Modifier.toString(constructor.getModifiers()))
                        .append(" ").append(clazz.getSimpleName()).append("(");
                Parameter[] parameters = constructor.getParameters();
                for (Parameter parameter : parameters) {
                    result.append(parameter.getType().getSimpleName())
                            .append(" ").append(parameter.getName()).append(", ");
                }
                if (parameters.length > 0) {
                    result.delete(result.length() - 2, result.length()); // Видалення останнього коми та пробілу
                }
                result.append(")\n");
            }
        }

        // Список методів
        Method[] methods = clazz.getDeclaredMethods();
        if (methods.length > 0) {
            result.append("Методи:\n");
            for (Method method : methods) {
                result.append(Modifier.toString(method.getModifiers()))
                        .append(" ").append(method.getReturnType().getSimpleName())
                        .append(" ").append(method.getName()).append("(");
                Parameter[] parameters = method.getParameters();
                for (Parameter parameter : parameters) {
                    result.append(parameter.getType().getSimpleName())
                            .append(" ").append(parameter.getName()).append(", ");
                }
                if (parameters.length > 0) {
                    result.delete(result.length() - 2, result.length());
                }
                result.append(")\n");
            }
        }

        return result.toString();
    }
}